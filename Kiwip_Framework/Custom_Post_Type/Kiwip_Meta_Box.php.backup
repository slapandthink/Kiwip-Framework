<?php


/** 
 * Kiwip Meta Box
 *
 * @package Kiwip Framework
 * @since Kiwip Framework 0.1
 * @author Benjamin Cabanes | http://slapandthink.com | @slapandthink
 * @version 0.1
 * @copyright Benjamin Cabanes
 */
class Kiwip_Meta_Box{

	var $id          = string;
	var $title       = string;
	var $slug        = string;
	var $context     = string;
	var $priority    = string;
	var $cpt_name    = string;
	var $meta_fields = string;
	
	
	/**
	 * Construct
	 * @param string $name
	 * @param array $fields
	 * @param string $post_type_name
	 * @param string $context
	 * @param string $priorit
	 * @since Kiwip Framework 0.1
	 */
	public function __construct($name, $fields=array(), $cpt_name=null, $context='normal', $priority='default'){

		// Load Helper class
		$Helper = new Kiwip_Helper;

		if(isset($name) AND !empty($name)){
			$this->cpt_name    = $cpt_name;
			$this->id          = $Helper->kiwip_make_slugable($name);
			$this->slug        = $Helper->kiwip_make_slugable($name);
			$this->title       = $Helper->kiwip_make_readable($name);
			$this->context     = $context;
			$this->priority    = $priority;
			$this->meta_fields = $fields;

			add_action('admin_init', array(&$this, 'kiwip_add_meta_box'));
		}
		
		// Add multipart for files
		add_action('post_edit_form_tag', array(&$this, 'kiwip_post_edit_form_tag'));
		
		// Listen for the save post hook
		add_action('save_post', array(&$this, 'kiwip_save_post'));		
	}

	/**
	 * Kiwip Add Meta Box
	 * Method that calls the add_meta_box function
	 * @since Kiwip Framework 0.1
	 */
	public function kiwip_add_meta_box(){			
		add_meta_box(
			$this->id,
			$this->title,
			array(&$this, 'kiwip_metabox_callback'),
			$this->cpt_name,
			$this->context,
			$this->priority
		);
	}

	/**
	 * Kiwip Metabox Callback
	 * Adding all meta fields of metabox
	 * @param object $post
	 * @param object $data
	 * @return mixed
	 * @since Kiwip Framework 0.1
	 */
	public function kiwip_metabox_callback($post, $data){
		// Load Helper class
		$Helper = new Kiwip_Helper;
		// Nonce field for validation
		wp_nonce_field(plugin_basename(__FILE__), 'kiwip_nonce'); // http://codex.wordpress.org/Function_Reference/wp_nonce_field

		// Get all inputs from $data
		$meta_fields = $this->meta_fields;
		
		// Check the array and loop through it
		if(!empty($meta_fields)){
			echo '<div class="kiwip_helper">';
				echo '<table border="0" cellading="0" cellspacing="0" class="kiwip_table kiwip_helper_table">';
						
					/* Loop through $meta_fields */
					foreach($meta_fields as $field){
						$field_id_name = '_'.$this->slug."_".$Helper->kiwip_make_slugable($field['name']);
						$meta          = get_post_meta($post->ID, $field_id_name);

						echo '<tr>';
							echo '<th class="kiwip_th th">';
								echo '<label for="'.$field_id_name.'" class="kiwip_label">'.$field['label'].'</label>';
								echo '<div class="kiwip_description description">'.$field['description'].'</div>';
							echo '</th>';
							echo '<td class="kiwip_td td">';
						
								$this->kiwip_make_field($field_id_name, $field, $meta);
							
							echo '</td>';
						echo '</tr>';
					}
				
				echo '</table>';
			echo '</div>';
		}
	}

	/**
	 * Kiwip Make Field
	 * Return fields
	 * @param string $field_id_name
	 * @param array $type
	 * @param array $meta
	 * @return mixed
	 * @since Kiwip Framework 0.1
	 */
	public function kiwip_make_field($field_id_name, $field, $meta){

		/* Switch with all the different kind of field available */
		switch($field['type']):
			
			case 'text' :
				echo '<input type="text" name="kiwip['.$field_id_name.']" id="'.$field_id_name.'" value="'.$meta[0].'">';
			break;
			
			case 'textarea' :
				echo '<textarea name="kiwip['.$field_id_name.']" id="'.$field_id_name.'">'.$meta[0].'</textarea>';
			break;
			
			case 'checkbox' :
				echo '<input type="checkbox" name="kiwip['.$field_id_name.']" id="'.$field_id_name.'" '.checked($meta[0], 'on', false).' >';
			break;
			
			case 'yesno' :
				echo '<input type="radio" name="kiwip['.$field_id_name.']" id="'.$field_id_name.'_yes" value="yes" '.checked($meta[0], 'yes', false).' >';
				echo '<label for="'.$field_id_name.'_yes">'.__('Yes').'</label>';
				
				echo ' <input type="radio" name="kiwip['.$field_id_name.']" id="'.$field_id_name.'_no" value="no" '.checked($meta[0], 'no', false).' >';
				echo '<label for="'.$field_id_name.'_no">'.__('No').'</label>';
			break;
			
			case 'select' :
				echo '<select name="kiwip['.$field_id_name.']" id="'.$field_id_name.'">';
					foreach($field['options'] as $slug => $name){
						echo '<option value="'.$meta[0].'" '.selected($Helper->kiwip_make_slugable($slug), $meta[0], false).'>'.$Helper->kiwip_make_readable($name).'</option>';
					}
				echo '</select>';
			break;
			
			case 'checkboxes' :
				foreach($field['options'] as $slug => $name){
					echo '<input type="checkbox" name="kiwip['.$field_id_name.'][]" id="'.$field_id_name.'_'.$Helper->kiwip_make_slugable($slug).'" value="'.$meta[0].'" '.(in_array($Helper->kiwip_make_slugable($slug), maybe_unserialize($meta[0])) ? 'checked="checked"' : '').' /><label for="'.$field_id_name.'_'.$Helper->kiwip_make_slugable($slug).'">'.$Helper->kiwip_make_readable($name).'</label>';
				}
			break;
			
			case 'radio' :
				foreach($field['options'] as $slug => $name){
					echo '<input type="radio" name="kiwip['.$field_id_name.']" id="'.$field_id_name.'_'.$Helper->kiwip_make_slugable($slug).'" value="'.$meta[0].'" '.checked($Helper->kiwip_make_slugable($slug), $meta[0], false).' /><label for="'.$field_id_name.'_'.$Helper->kiwip_make_slugable($slug).'">'.$Helper->kiwip_make_readable($name).'</label>';
				}
			break;
			
			case 'editor' :
				wp_editor($meta[0], $field_id_name, array_merge(
					
					// Default
					array(
						'textarea_name' => 'kiwip['.$field_id_name.']',
						'media_buttons' => false
					),
					
					// Given
					isset($field['options']) ? $field['options'] : array()
				
				));
			break;
			
			case 'image' :
				//echo '<input type="file" name="kiwip['.$field_id_name.']" id="'.$field_id_name.'"  />';
				
				//if(!empty($meta[0])) echo '<img src="'.$meta[0].'" />';
				echo $this->kiwip_medialibrary_uploader( $field_id_name, $meta[0], 'full', '', 0, 'kiwip['.$field_id_name.']', false );
			break;
			
			case 'date' :
				echo '<input type="text" name="kiwip['.$field_id_name.']" id="'.$field_id_name.'" class="kiwip_datepicker datepicker" value="'.$meta[0].'" />';
			break;
			
			default:
				echo __('Input type not available');
			break;
			
		endswitch;
	}
	
	
	/**
	 * Kiwip Save Post
	 * Hooks into the save hook for the newly registered Post Type
	 * @since Kiwip Framework 0.1
	 */
	public function kiwip_save_post(){
		// Load Helper class
		$Helper = new Kiwip_Helper;
		// Deny the wordpress autosave function
		if(defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;

		if($_POST && !wp_verify_nonce($_POST['kiwip_nonce'], plugin_basename(__FILE__))) return;
		if(!isset($_POST)) return;
		
		global $post;
		if(!isset($post->ID) && get_post_type($post->ID) !== $this->post_type_name) return;
		
		// Loop through each meta box
		if(!empty($this->meta_fields)){
			foreach($this->meta_fields as $field){
				$field_id_name = '_'.$this->slug."_".$Helper->kiwip_make_slugable($field['name']);

				// validation rules here 

				update_post_meta($post->ID, $field_id_name, $_POST['kiwip'][$field_id_name]);
				
			}			
		}		
	}
	
	
	/**
	 * Kiwip Post Edit Form Tag
	 * Adds multipart support to the post form
	 * @since Kiwip Framework 0.1
	 */
	function kiwip_post_edit_form_tag(){
		echo ' enctype="multipart/form-data"';
	}

	/**
	 * Kiwip Medialibrary Uploader Init
	 * Sets up a custom post type to attach image to.  This allows us to have
	 * individual galleries for different uploaders.
	 * @since Kiwip Framework 0.1
	 */
	public function kiwip_medialibrary_uploader_init () {
		register_post_type( 'kiwip_framework', array(
			'labels' => array(
				'name' => 'Kiwip Framework Internal Container',
			),
			'public' => true,
			'show_ui' => false,
			'capability_type' => 'post',
			'hierarchical' => false,
			'rewrite' => false,
			'supports' => array( 'title', 'editor' ), 
			'query_var' => false,
			'can_export' => true,
			'show_in_nav_menus' => false
		) );
	}

	/**
	 * Kiwip Medialibrary Uploader
	 * Media Uploader Using the WordPress Media Library.
	 *
	 * Parameters:
	 * - string $_id - A token to identify this field (the name).
	 * - string $_value - The value of the field, if present.
	 * - string $_mode - The display mode of the field.
	 * - string $_desc - An optional description of the field.
	 * - int $_postid - An optional post id (used in the meta boxes).
	 *
	 * Dependencies:
	 * - kiwip_mlu_get_silentpost()
	 * @return mixed
	 * @since Kiwip Framework 0.1
	 */
	public function kiwip_medialibrary_uploader( $_id, $_value, $_mode = 'full', $_desc = '', $_postid = 0, $_name = '', $tab=true) {
		// setting tabs or not, by default yes
		if($tab == false){
			
		}

		// Call kiwip_medialibrary_uploader_init for register post type (get silent post)
		$this->kiwip_medialibrary_uploader_init();

		// Gets the unique option id
		$option_name = $this->args['option_name'];

		$output = '';
		$id = '';
		$class = '';
		$int = '';
		$value = '';
		$name = '';
		
		$id = strip_tags( strtolower( $_id ) );
		// Change for each field, using a "silent" post. If no post is present, one will be created.
		$int = $this->kiwip_medialibrary_uploader_get_silentpost( $id );
		
		// If a value is passed and we don't have a stored value, use the value that's passed through.
		if ( $_value != '' && $value == '' ) {
			$value = $_value;
		}
		
		if ($_name != '') {
			$name = $_name;
		}
		else {
			$name = $option_name.'['.$id.']';
		}
		
		if ( $value ) { $class = ' has-file'; }
		$output .= '<input id="' . $id . '" class="upload' . $class . ' file" type="text" name="'.$name.'" value="' . $value . '" />' . "\n";
		$output .= '<input id="upload_' . $id . '" class="upload_button button" type="button" value="' . __( 'Upload', 'kiwip_textdomain') . '" rel="' . $int . '" />' . "\n";
		
		if ( $_desc != '' ) {
			$output .= '<br /><span class="description">' . $_desc . '</span>' . "\n";
		}
		
		$output .= '<div class="screenshot" id="' . $id . '_image">' . "\n";
		
		if ( $value != '' ) { 
			$remove = '<br /><a href="javascript:(void);" class="mlu_remove button">Remove</a>';
			$image = preg_match( '/(^.*\.jpg|jpeg|png|gif|ico*)/i', $value );
			if ( $image ) {
				$output .= '<img src="' . $value . '" alt="" />'.$remove.'';
			} else {
				$parts = explode( "/", $value );
				for( $i = 0; $i < sizeof( $parts ); ++$i ) {
					$title = $parts[$i];
				}

				// No output preview if it's not an image.			
				$output .= '';
			
				// Standard generic output if it's not an image.	
				$title = __( 'View File', 'kiwip_textdomain' );
				$output .= '<div class="no_image"><span class="file_link"><a href="' . $value . '" target="_blank" rel="external">'.$title.'</a></span>' . $remove . '</div>';
			}	
		}
		$output .= '</div>' . "\n";

		return $output;
	}

	/**
	 * Kiwip Medialibrary Uploader Get Silentpost
	 * Uses "silent" posts in the database to store relationships for images.
	 * This also creates the facility to collect galleries of, for example, logo images.
	 * 
	 * Return: $_postid.
	 *
	 * If no "silent" post is present, one will be created with the type "kiwip_framework"
	 * and the post_name of "of-$_token".
	 *
	 * Example Usage:
	 * kiwip_mlu_get_silentpost ( 'of_logo' );
	 * @since Kiwip Framework 0.1
	 */
	public function kiwip_medialibrary_uploader_get_silentpost ( $_token ) {
		global $wpdb;
		$_id = 0;

		// Check if the token is valid against a whitelist.
		// $_whitelist = array( 'of_logo', 'of_custom_favicon', 'of_ad_top_image' );
		// Sanitise the token.
		
		$_token = strtolower( str_replace( ' ', '_', $_token ) );
		
		// if ( in_array( $_token, $_whitelist ) ) {
		if ( $_token ) {
			
			// Tell the function what to look for in a post.
			
			$_args = array( 'post_type' => 'kiwip_framework', 'post_name' => 'of-' . $_token, 'post_status' => 'draft', 'comment_status' => 'closed', 'ping_status' => 'closed' );
			
			// Look in the database for a "silent" post that meets our criteria.
			$query = 'SELECT ID FROM ' . $wpdb->posts . ' WHERE post_parent = 0';
			foreach ( $_args as $k => $v ) {
				$query .= ' AND ' . $k . ' = "' . $v . '"';
			} // End FOREACH Loop
			
			$query .= ' LIMIT 1';
			$_posts = $wpdb->get_row( $query );
			
			// If we've got a post, loop through and get it's ID.
			if ( count( $_posts ) ) {
				$_id = $_posts->ID;
			} else {
			
				// If no post is present, insert one.
				// Prepare some additional data to go with the post insertion.
				$_words = explode( '_', $_token );
				$_title = join( ' ', $_words );
				$_title = ucwords( $_title );
				$_post_data = array( 'post_title' => $_title );
				$_post_data = array_merge( $_post_data, $_args );
				$_id = wp_insert_post( $_post_data );
			}	
		}
		return $_id;
	}

	/**
	 * Debug
	 * Debug function
	 * @param anything
	 * @since Kiwip Framework 0.1
	 */
	public function debug($value){
		echo "<pre>";
		print_r($value);
		echo "</pre>";
	}

}






